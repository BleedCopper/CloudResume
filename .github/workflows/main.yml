name: Blob storage website CI

on:
    push:
        branches: [ master ]

env:
  AZURE_STORAGE_NAME: 'tfcloudresumestore'
  AZURE_FUNCTIONAPP_NAME: 'tf-cloudresume-fnc'   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'compute/azureFunctions'       # set this to the path to your function app project, defaults to the repository root
  DOTNET_VERSION: '8.0.x'                   # set this to the dotnet version to use (e.g. '2.1.x', '3.1.x', '5.0.x')
  TF_CREATE: true
  
jobs:
  terraform:
        defaults:
            run:
                working-directory: 'IaC/terraform' 
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Login to azure
              uses: azure/login@v1
              with:
                creds: ${{ secrets.AZURE_CREDENTIALS }}
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1
              with:
                cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
            - name: Terraform Init
              run: terraform init 
            - name: Terraform Plan
              env:
                TF_VAR_cloudflare_zoneid: ${{ secrets.TF_VAR_CLOUDFLARE_ZONEID}}
                TF_VAR_cloudflare_api: ${{ secrets.TF_VAR_CLOUDFLARE_API}}
                TF_VAR_tf_create: ${{ env.TF_CREATE }}
              run: terraform plan 
            - name: Terraform apply
              env:
                TF_VAR_cloudflare_zoneid: ${{ secrets.TF_VAR_CLOUDFLARE_ZONEID}}
                TF_VAR_cloudflare_api: ${{ secrets.TF_VAR_CLOUDFLARE_API}}
                TF_VAR_tf_create: ${{ env.TF_CREATE }}
              run: terraform apply -auto-approve 
              
  frontend:
    runs-on: ubuntu-latest
    needs: terraform
    defaults:
      run:
        working-directory: 'website/vue'
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './website/vue/package-lock.json'
    - run: npm ci
    - run: npm run build 

    - name: Azure login
      uses: azure/login@v1
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
            az storage blob upload-batch --account-name ${{env.AZURE_STORAGE_NAME}} --auth-mode key -d '$web' -s './website/vue/dist/' --overwrite
  # Azure logout
    - name: logout
      run: |
            az logout
      if: always()

  backend:
   runs-on: windows-latest # For Linux, use ubuntu-latest
   needs: terraform
   environment: dev
   steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    # If you want to use Azure RBAC instead of Publish Profile, then uncomment the task below
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Resolve Project Dependencies Using Dotnet'
      shell: pwsh # For Linux, use bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        dotnet build --configuration Release --output ./output
        popd

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
        #publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }} # Remove publish-profile to use Azure RBAC
    
    # Azure logout
    - name: logout
      run: |
            az logout
      if: always()
      
  playwright-tests:
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'tests/playwright'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npx playwright test
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

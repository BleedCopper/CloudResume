name: AWS

on:
    push:
        branches: [ master ]

env:
  AWS_ROLE_TO_ASSUME: 'arn:aws:iam::724772065639:role/GithubTerraform'
  AWS_S3_BUCKET: 'aws.rissaquindoza.com'
  
permissions:
  id-token: write
  contents: read
jobs:
  changes:
        runs-on: ubuntu-latest
        outputs:
            # lambda: ${{ steps.filter.outputs.lambda }}
            react: ${{ steps.filter.outputs.react }}
            terraform: ${{ steps.filter.outputs.terraform }}
            workflow: ${{ steps.filter.outputs.workflow }}
        steps:
        - uses: actions/checkout@v3
        - uses: dorny/paths-filter@v2
          id: filter
          with:
            filters: |
                lambda:
                    - 'compute/lambda/**'
                react:
                    - 'website/react/**'
                terraform:
                    - 'IaC/terraform/aws/**'
                workflow:
                    - '.github/workflows/aws.yml'
  terraform:
        needs: changes
        defaults:
            run:
                working-directory: 'IaC/terraform/aws' 
        runs-on: ubuntu-latest
        if: ${{ needs.changes.outputs.terraform == 'true' || needs.changes.outputs.workflow == 'true' }}
        steps:
            - uses: actions/checkout@v4
            # - name: Configure AWS Credentials
            #   uses: aws-actions/configure-aws-credentials@v4
            #   with:
            #     role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
            #     aws-region: ap-southeast-2
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v1
              with:
                cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
                terraform_version: 1.4.5
            - name: Setup Terraform Backend
              id: backend
              run: |
                cat > backend.config << EOF
                bucket = "rqterraformstate"
                key = "terraform.tfstate"
                region = "ap-southeast-2"
                encrypt = true
                EOF
            - name: Terraform Init
              env:
                AWS_ROLE_ARN: ${{ vars.AWS_ROLE_TO_ASSUME }}
                AWS_REGION: ap-southeast-2
              run: terraform init -backend-config="backend.config" -upgrade
            - name: Terraform Plan
              env:
                TF_VAR_cloudflare_zoneid: ${{ secrets.TF_VAR_CLOUDFLARE_ZONEID}}
                TF_VAR_cloudflare_api: ${{ secrets.TF_VAR_CLOUDFLARE_API}}
                AWS_ROLE_ARN: ${{ vars.AWS_ROLE_TO_ASSUME }}
                AWS_REGION: ap-southeast-2
              run: terraform plan 
            - name: Terraform apply
              env:
                TF_VAR_cloudflare_zoneid: ${{ secrets.TF_VAR_CLOUDFLARE_ZONEID}}
                TF_VAR_cloudflare_api: ${{ secrets.TF_VAR_CLOUDFLARE_API}}
                AWS_ROLE_ARN: ${{ vars.AWS_ROLE_TO_ASSUME }}
                AWS_REGION: ap-southeast-2
              run: terraform apply -auto-approve 
              
  frontend:
    runs-on: ubuntu-latest
    needs: terraform
    defaults:
      run:
        working-directory: 'website/react'
    if: ${{ always() && (needs.changes.outputs.react == 'true'  || needs.changes.outputs.workflow == 'true') }}
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './website/react/package-lock.json'
    - run: npm ci
    - run: npm run build 

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
        aws-region: ap-southeast-2

    
    - name: Upload to S3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read
      env:
        SOURCE_DIR: build/
        AWS_S3_BUCKET: ${{ vars.AWS_S3_BUCKET }}

    - name: Invalidate Cloudflare cache
      run: |
        curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.TF_VAR_CLOUDFLARE_ZONEID }}/purge_cache" \
             -H "Authorization: Bearer ${{ secrets.TF_VAR_CLOUDFLARE_API }}" \
             -H "Content-Type: application/json" \
             --data '{"purge_everything":true}'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.TF_VAR_CLOUDFLARE_API }}
